// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FocusStacking_MaxContrast
#pragma kernel ContrastMapInit

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> NewContrastMap;
RWTexture2D<float4> FocusStackingImg;

Texture2D<float4> SrcTex;
Texture2D<float> ContrastMap;

int LocalWinSize;
int TexWidth;
int TexHeight;

[numthreads(2,2,1)]
void FocusStacking_MaxContrast(uint3 id : SV_DispatchThreadID)
{
	int startX = max((int)id.x - (int)(LocalWinSize * 0.5), 0);
	int startY = max((int)id.y - (int)(LocalWinSize * 0.5), 0);
	int endX   = min((int)id.x + (int)(LocalWinSize * 0.5), TexWidth);
	int endY   = min((int)id.y + (int)(LocalWinSize * 0.5), TexHeight);

	float maxLuminance = -1.0;
	float minLuminance = 1000.0;

	for (int y = startY; y < endY; ++y)
	for (int x = startX; x < endX; ++x)
	{
		float luminance = 0.298912 * SrcTex[uint2(x, y)].x
										+ 0.586611 * SrcTex[uint2(x, y)].y
										+ 0.114478 * SrcTex[uint2(x, y)].z;
		maxLuminance = max( maxLuminance, luminance );
		minLuminance = min( minLuminance, luminance );
	}

	float contrast = maxLuminance - minLuminance;

	if (ContrastMap[id.xy] < contrast)
	{
		NewContrastMap[id.xy]   = contrast;
		FocusStackingImg[id.xy] = SrcTex[id.xy];
	}else
		NewContrastMap[id.xy]   = ContrastMap[id.xy];
}


RWTexture2D<float> InitContrastMap;

[numthreads(2, 2, 1)]
void ContrastMapInit(uint3 id : SV_DispatchThreadID)
{
  InitContrastMap[id.xy] = -1.0;
}